/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package com.zabbix.security;

import org.apache.commons.codec.binary.Base64;

/**
 * Represents the encrypted key which is the
 * Zabbix Encryption prefix (|ZBX|) + the cipher text
 * + a separator + the IV bytes base64Encoded. This encrypted key should be provided
 * for JMX client passwords. It is encrypted/decrypted using the private key
 * that is originally generated by the user.
 * @author Ryan Rupp
 *
 */
public class EncryptedKey {
	
	private static final String ENCRYPTION_PREFIX = "|ZBX|";
	private static final String SEPERATOR = "***";
	
	private final byte[] iv;
    private final byte[] cipher;
    
    /**
     * Checks the format of the string to verify it is an
     * encrypted key
     * @param password The password which may or may not be encrypted
     * @return Whether the password is encrypted or not
     */
    public static boolean isEncryptedKey(String password) {
    	if (password == null) return false;
    	
    	return password.startsWith(ENCRYPTION_PREFIX) &&
    			password.contains(SEPERATOR);
    }
	
	public EncryptedKey(byte[] iv, byte[] cipher) {
		this.iv = iv;
		this.cipher = cipher;
	}
	
	/**
	 * Builds the EncryptedKey from the base64 encoded String
	 * @param base64Key
	 */
	public EncryptedKey(String base64Key) {
        this(base64Key, SEPERATOR);
    }

	/**
	 * Parses out the base 64 encoded string into the EncryptedKey
	 * @param base64 The key encrypted with base64 encoding
	 * @param separator The separator between the cipher text and IV
	 */
    protected EncryptedKey(String base64, String separator) {
        int loc = base64.indexOf(separator);
        this.iv = base64Decode(base64.substring(ENCRYPTION_PREFIX.length(), loc));
        this.cipher = base64Decode(base64.substring(loc + separator.length()));
    }

    public byte[] getCiphertext() {
        return cipher;
    }

    public byte[] getIv() {
        return iv;
    }

    @Override
    public String toString() {
        return ENCRYPTION_PREFIX + base64Encode(iv) + SEPERATOR + base64Encode(cipher);
    }
    
    // Pulled into a separate function because it relies on a separate
    // 3rd party library (apache-commons) which could be changed easily.
    private String base64Encode(byte[] bytes) {
    	return Base64.encodeBase64String(bytes);
    }
    
    // Pulled into a separate function because it relies on a separate
    // 3rd party library (apache-commons) which could be changed easily.
    private byte[] base64Decode(String data) {
    	return Base64.decodeBase64(data);
    }
}
